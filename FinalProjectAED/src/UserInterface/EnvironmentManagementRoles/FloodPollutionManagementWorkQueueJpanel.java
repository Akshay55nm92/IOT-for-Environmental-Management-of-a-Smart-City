/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.EnvironmentManagementRoles;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.FloodAlertManagementOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Sensors.FloodAlertSensor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FloodAlertWorkRequest;
import Business.WorkQueue.NoisePollutionSolutionWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Random;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arjit
 */
public class FloodPollutionManagementWorkQueueJpanel extends javax.swing.JPanel {
    private OrganizationDirectory organizationdirectory;
    private UserAccount userAccount;
    private JPanel userProcessContainer;
    /**
     * Creates new form FloodPollutionManagementWorkQueueJpanel
     */
   

    public FloodPollutionManagementWorkQueueJpanel(JPanel userProcessContainer, UserAccount account, OrganizationDirectory organizationDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.organizationdirectory = organizationDirectory;
        populateTable();
    }
    
    public String convertListToCSV(ArrayList<String> ZipcodeList)
    {
//        String s = "";
//        for(int i=0; i<ZipcodeList.size(); i++)
//        {
//            s = String.join(",",ZipcodeList.get(i));
//        }
//        
        String zipcodesCommaSeparated = ZipcodeList.stream().collect(Collectors.joining(","));
        
        return zipcodesCommaSeparated;
      
    }
    
    public void populateTable(){
        ArrayList<String> ZipcodeList = new ArrayList<String>();
        ArrayList<FloodAlertWorkRequest> floodAlertWorkRequest = new ArrayList<FloodAlertWorkRequest>();
        FloodAlertWorkRequest noise_wrs = null;
        DefaultTableModel model = (DefaultTableModel) Floodtable.getModel();
        model.setRowCount(0);
        
        for(Organization organization : organizationdirectory.getOrganizationList())
        {
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof FloodAlertWorkRequest){
                noise_wrs = (FloodAlertWorkRequest)wr;
            
                for(FloodAlertSensor fas : noise_wrs.getFloodalertsensors())
                {
                ZipcodeList.add(fas.getZipcode());
                }
                Object[] row = new Object[8];
                row[0] = noise_wrs;
                row[1] = noise_wrs.getSender();
                row[2] = convertListToCSV(ZipcodeList);
                //row[2] = noise_wrs.getFloodAlertSensor().getZipcode();
                row[3] = noise_wrs.getStatus();
                row[4] = noise_wrs.getMessage();
                row[5] = noise_wrs.getRequestDate();
                row[6] = noise_wrs.getResolveDate();
                model.addRow(row);
            }
        }
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Floodtable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        Floodtable.setBackground(new java.awt.Color(234, 234, 249));
        Floodtable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Floodtable.setForeground(new java.awt.Color(0, 0, 51));
        Floodtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request ID", "Sender", "Zipcodes", "Status", "Message", "Received Date", "Resolved Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Floodtable);

        add(jScrollPane1);
        jScrollPane1.setBounds(6, 84, 1430, 177);

        jButton2.setBackground(new java.awt.Color(0, 0, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Resolve");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(480, 310, 85, 25);

        jButton1.setBackground(new java.awt.Color(0, 0, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("<< Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(40, 310, 91, 25);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Flood Management Work Queue");
        add(jLabel1);
        jLabel1.setBounds(166, 24, 382, 29);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/pics/3f282-amphitheater-flooding.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        add(jLabel3);
        jLabel3.setBounds(-15, -34, 1510, 900);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        FloodAlertWorkRequest noise_wrs = null;
        int row = Floodtable.getSelectedRow();
        if(row <0){
            JOptionPane.showMessageDialog(null, "No row selected");
        }else{
        Random rn = new Random();

        WorkRequest workRequest = (WorkRequest) Floodtable.getValueAt(row, 0);

        FloodAlertWorkRequest floodSolutionWorkRequest = (FloodAlertWorkRequest)workRequest;
        floodSolutionWorkRequest.setStatus("Resolved");
        floodSolutionWorkRequest.setResolveDate(new Date());

        for(Organization organization : organizationdirectory.getOrganizationList())
        {
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof FloodAlertWorkRequest){
                noise_wrs = (FloodAlertWorkRequest)wr;
                for(int i=0; i<noise_wrs.getFloodalertsensors().size(); i++)
                {
                    noise_wrs.getFloodalertsensors().get(i).setCurrentlevel(rn.nextInt(60));
                }
            }
        }
        }
        populateTable();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        //SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        //sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Floodtable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
