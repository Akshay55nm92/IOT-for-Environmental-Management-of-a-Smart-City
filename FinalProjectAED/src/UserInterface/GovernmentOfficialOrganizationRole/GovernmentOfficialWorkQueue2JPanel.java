/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.GovernmentOfficialOrganizationRole;

import Business.Enterprise.Enterprise;
import Business.Organization.CitizenOrganization;
import Business.Organization.GovernmentOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Sensors.FloodAlertSensor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CitizenWorkRequest;
import Business.WorkQueue.GovernmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akshay
 */
public class GovernmentOfficialWorkQueue2JPanel extends javax.swing.JPanel {

    private OrganizationDirectory directory;
    private UserAccount userAccount;
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    /**
     * Creates new form GovernmentOfficialWorkQueueJPanel
     */
    public GovernmentOfficialWorkQueue2JPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, OrganizationDirectory directory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.directory = directory;
        this.enterprise = enterprise;
        
        populateTable();
    }
    
    public void populateTable(){
        GovernmentWorkRequest gov_wrs = null;
        DefaultTableModel model = (DefaultTableModel) FloodAlertWorkQueuejTable.getModel();
        model.setRowCount(0);
        
        for(Organization organization : directory.getOrganizationList())
        {
            for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) 
            {
                if (wr instanceof GovernmentWorkRequest)
                {
                    gov_wrs = (GovernmentWorkRequest)wr;
            
                    if(gov_wrs.getFloodAlertSensorList() != null)
                    {
                    Object[] row = new Object[3];
                    row[0] = gov_wrs;
                    row[1] = gov_wrs.getSender();
                    row[2] = gov_wrs.getFloodAlertMessage();
                    model.addRow(row);
                    }
                }
            }
        }
   }
    
    /**
     * Creates new form GovernmentOfficialWorkQueue2JPanel
     */
    public GovernmentOfficialWorkQueue2JPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FloodAlertWorkQueuejTable = new javax.swing.JTable();
        backjButton1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        CitizenNotificationjButton = new javax.swing.JButton();
        MessageLabel = new javax.swing.JLabel();
        CitizenNotificationjButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Government Official Work Queue");

        FloodAlertWorkQueuejTable.setBackground(new java.awt.Color(234, 234, 249));
        FloodAlertWorkQueuejTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        FloodAlertWorkQueuejTable.setForeground(new java.awt.Color(0, 0, 51));
        FloodAlertWorkQueuejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request Id", "Sender", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(FloodAlertWorkQueuejTable);

        backjButton1.setBackground(new java.awt.Color(0, 0, 204));
        backjButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backjButton1.setForeground(new java.awt.Color(255, 255, 255));
        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("View Complete Message");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        CitizenNotificationjButton.setBackground(new java.awt.Color(255, 0, 0));
        CitizenNotificationjButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CitizenNotificationjButton.setForeground(new java.awt.Color(255, 255, 255));
        CitizenNotificationjButton.setText("Send Notificatication to Citizens");
        CitizenNotificationjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CitizenNotificationjButtonActionPerformed(evt);
            }
        });

        MessageLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        MessageLabel.setForeground(new java.awt.Color(255, 0, 0));

        CitizenNotificationjButton1.setBackground(new java.awt.Color(0, 204, 0));
        CitizenNotificationjButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CitizenNotificationjButton1.setForeground(new java.awt.Color(255, 255, 255));
        CitizenNotificationjButton1.setText("Send Resolve Notificatication to Citizens");
        CitizenNotificationjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CitizenNotificationjButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(MessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CitizenNotificationjButton)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 992, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(CitizenNotificationjButton1))
                        .addGap(0, 216, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jLabel1)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backjButton1)
                    .addComponent(jButton1)
                    .addComponent(CitizenNotificationjButton))
                .addGap(31, 31, 31)
                .addComponent(CitizenNotificationjButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int row = FloodAlertWorkQueuejTable.getSelectedRow();

        GovernmentWorkRequest request = (GovernmentWorkRequest)FloodAlertWorkQueuejTable.getValueAt(row, 0);
        MessageLabel.setText(request.getFloodAlertMessage());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CitizenNotificationjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CitizenNotificationjButtonActionPerformed
        // TODO add your handling code here:
        ArrayList<String> ZipcodeList = new ArrayList<String>();
        int row = FloodAlertWorkQueuejTable.getSelectedRow();
        if(row <0){
            JOptionPane.showMessageDialog(null, "No row selected");
        }
        else
        {
            GovernmentWorkRequest request = (GovernmentWorkRequest)FloodAlertWorkQueuejTable.getValueAt(row, 0);

            CitizenWorkRequest citizenWorkRequest = new CitizenWorkRequest();
            
            for(FloodAlertSensor fas : request.getFloodAlertSensorList())
            {
            ZipcodeList.add(fas.getZipcode());
            }
            
            citizenWorkRequest.setFloodAlertSensorList(request.getFloodAlertSensorList());
            citizenWorkRequest.setFloodAlertMessage("The Areas bearing pincodes "+ZipcodeList.stream().collect(Collectors.joining(","))+" are under high risk of flood. Please stay indoors until further notice.");
            citizenWorkRequest.setSender(userAccount);
            citizenWorkRequest.setStatus("Message Sent to Citizens");

            Organization orgn = null;
            Organization orgn1 = null;
            for(Organization org : directory.getOrganizationList())
            {
                //System.out.println(org.getName());
                if (org instanceof GovernmentOrganization){
                    orgn = org;
                    break;
                }

            }
            for(Organization org1 : directory.getOrganizationList())
            {
                if(org1 instanceof CitizenOrganization){
                    orgn1 = org1;
                    break;

                } }
                if (orgn!=null){
                    orgn.getWorkQueue().getWorkRequestList().add(citizenWorkRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(citizenWorkRequest);
                }

                if (orgn1!=null){
                    orgn1.getWorkQueue().getWorkRequestList().add(citizenWorkRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(citizenWorkRequest);
                }
                JOptionPane.showMessageDialog(null, "Request Sent to Citizen");
            }
    }//GEN-LAST:event_CitizenNotificationjButtonActionPerformed

    private void CitizenNotificationjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CitizenNotificationjButton1ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> ZipcodeList = new ArrayList<String>();
        int row = FloodAlertWorkQueuejTable.getSelectedRow();
        if(row <0){
            JOptionPane.showMessageDialog(null, "No row selected");
        }
        else
        {
            GovernmentWorkRequest request = (GovernmentWorkRequest)FloodAlertWorkQueuejTable.getValueAt(row, 0);

            CitizenWorkRequest citizenWorkRequest = new CitizenWorkRequest();
            
            for(FloodAlertSensor fas : request.getFloodAlertSensorList())
            {
            ZipcodeList.add(fas.getZipcode());
            }
            
            citizenWorkRequest.setFloodAlertSensorList(request.getFloodAlertSensorList());
            citizenWorkRequest.setFloodAlertMessage("The Areas bearing pincodes "+ZipcodeList.stream().collect(Collectors.joining(","))+" are out of risk of flood. Since water levels in the River are under control");
            citizenWorkRequest.setSender(userAccount);
            citizenWorkRequest.setStatus("Resolution message sent to Citizens");

            Organization orgn = null;
            Organization orgn1 = null;
            for(Organization org : directory.getOrganizationList())
            {
                //System.out.println(org.getName());
                if (org instanceof GovernmentOrganization){
                    orgn = org;
                    break;
                }

            }
            for(Organization org1 : directory.getOrganizationList())
            {
                if(org1 instanceof CitizenOrganization){
                    orgn1 = org1;
                    break;

                } }
                if (orgn!=null){
                    orgn.getWorkQueue().getWorkRequestList().add(citizenWorkRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(citizenWorkRequest);
                }

                if (orgn1!=null){
                    orgn1.getWorkQueue().getWorkRequestList().add(citizenWorkRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(citizenWorkRequest);
                }
                JOptionPane.showMessageDialog(null, "Request Sent to Citizen");
            }
    }//GEN-LAST:event_CitizenNotificationjButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CitizenNotificationjButton;
    private javax.swing.JButton CitizenNotificationjButton1;
    private javax.swing.JTable FloodAlertWorkQueuejTable;
    private javax.swing.JLabel MessageLabel;
    private javax.swing.JButton backjButton1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
