/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.EnvironmentSensorEnterprise.NoisePollutionManagement;

import Business.Organization.EnvironmentSensorOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Sensors.NoisePollutionSensor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AirPollutionSolutionWorkRequest;
import Business.WorkQueue.NoisePollutionSolutionWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.Date;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 *
 * @author Akshay
 */
public class ViewNoisePollutionWorkQueueJPanel extends javax.swing.JPanel {

    private OrganizationDirectory directory;
    private UserAccount userAccount;
    private JPanel userProcessContainer;
    /**
     * Creates new form ViewNoisePollutionWorkQueueJPanel
     */
    public ViewNoisePollutionWorkQueueJPanel(JPanel userProcessContainer, UserAccount userAccount, OrganizationDirectory directory) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.directory = directory;
        
        populateTable();
    }

    public void populateTable(){
        NoisePollutionSolutionWorkRequest noise_wrs = null;
        DefaultTableModel model = (DefaultTableModel) WorkQueuejTable.getModel();
        model.setRowCount(0);
        
        for(Organization organization : directory.getOrganizationList())
        {
            if(organization instanceof EnvironmentSensorOrganization)
            {
                for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof NoisePollutionSolutionWorkRequest) {
                        noise_wrs = (NoisePollutionSolutionWorkRequest)wr;
            
                        Object[] row = new Object[7];
                        row[0] = noise_wrs;
                        row[1] = noise_wrs.getSender();
                        row[2] = noise_wrs.getNoisePollutionSensor().getSensorId();
                        row[3] = noise_wrs.getNoisePollutionSensor().getZipcode();
                        row[4] = noise_wrs.getStatus();
                        row[5] = noise_wrs.getMessage();
                        row[6] = noise_wrs.getRequestDate();
                        model.addRow(row);
                }
                }
            }
    }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        WorkQueuejTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PendingWorkQueuejTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ResolvedWorkQueuejTable = new javax.swing.JTable();
        SowSensorReadingButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Noise Pollution Work Queue");

        WorkQueuejTable.setBackground(new java.awt.Color(234, 234, 249));
        WorkQueuejTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        WorkQueuejTable.setForeground(new java.awt.Color(0, 0, 51));
        WorkQueuejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request ID", "Sender", "Sensor Id", "Zipcode", "Status", "Message", "Sent Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(WorkQueuejTable);

        backJButton.setBackground(new java.awt.Color(0, 0, 204));
        backJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Get Pending Work Requests");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Pending Requests");

        PendingWorkQueuejTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PendingWorkQueuejTable.setForeground(new java.awt.Color(153, 0, 0));
        PendingWorkQueuejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request ID", "Sender", "Sensor Id", "Zipcode", "Status", "Message", "Sent Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PendingWorkQueuejTable);

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 0));
        jLabel3.setText("Resolved Requests");

        jButton1.setBackground(new java.awt.Color(0, 0, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Get Resolved Work Requests");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ResolvedWorkQueuejTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ResolvedWorkQueuejTable.setForeground(new java.awt.Color(0, 153, 51));
        ResolvedWorkQueuejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request ID", "Sender", "Sensor Id", "Zipcode", "Status", "Message", "Sent Date", "Resolved Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(ResolvedWorkQueuejTable);

        SowSensorReadingButton.setBackground(new java.awt.Color(0, 0, 204));
        SowSensorReadingButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SowSensorReadingButton.setForeground(new java.awt.Color(255, 255, 255));
        SowSensorReadingButton.setText("Show Sensor Reading");
        SowSensorReadingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SowSensorReadingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(backJButton)
                        .addGap(0, 758, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(58, 58, 58)
                                .addComponent(jButton2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(34, 34, 34)
                                .addComponent(jButton1)
                                .addGap(44, 44, 44)
                                .addComponent(SowSensorReadingButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(backJButton)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton1)
                    .addComponent(SowSensorReadingButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        //SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        //sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        NoisePollutionSolutionWorkRequest noise_wrs = null;
        DefaultTableModel model = (DefaultTableModel) PendingWorkQueuejTable.getModel();
        model.setRowCount(0);

        for(Organization organization : directory.getOrganizationList())
        {
            if(organization instanceof EnvironmentSensorOrganization)
            {
                for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof NoisePollutionSolutionWorkRequest)    {
                    noise_wrs = (NoisePollutionSolutionWorkRequest)wr;

                    if(!noise_wrs.getStatus().equalsIgnoreCase("Resolved"))
                    {
                        Object[] row = new Object[7];
                        row[0] = noise_wrs;
                        row[1] = noise_wrs.getSender();
                        row[2] = noise_wrs.getNoisePollutionSensor().getSensorId();
                        row[3] = noise_wrs.getNoisePollutionSensor().getZipcode();
                        row[4] = noise_wrs.getStatus();
                        row[5] = noise_wrs.getMessage();
                        row[6] = noise_wrs.getRequestDate();
                        model.addRow(row);
                    }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        NoisePollutionSolutionWorkRequest noise_wrs = null;
        DefaultTableModel model = (DefaultTableModel) ResolvedWorkQueuejTable.getModel();
        model.setRowCount(0);

        for(Organization organization : directory.getOrganizationList())
        {
            if(organization instanceof EnvironmentSensorOrganization)
            {
                for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof NoisePollutionSolutionWorkRequest)    {
                    noise_wrs = (NoisePollutionSolutionWorkRequest)wr;

                    if(noise_wrs.getStatus().equalsIgnoreCase("Resolved"))
                    {
                        Object[] row = new Object[8];
                        row[0] = noise_wrs;
                        row[1] = noise_wrs.getSender();
                        row[2] = noise_wrs.getNoisePollutionSensor().getSensorId();
                        row[3] = noise_wrs.getNoisePollutionSensor().getZipcode();
                        row[4] = noise_wrs.getStatus();
                        row[5] = noise_wrs.getMessage();
                        row[6] = noise_wrs.getRequestDate();
                        row[7] = noise_wrs.getResolveDate();
                        model.addRow(row);
                    }
                }
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SowSensorReadingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SowSensorReadingButtonActionPerformed
        // TODO add your handling code here:
        int row = ResolvedWorkQueuejTable.getSelectedRow();
        if(row <0){
            JOptionPane.showMessageDialog(null, "No row selected");
        }
        else
        {

            NoisePollutionSolutionWorkRequest noisePollutionSolutionWorkRequest = (NoisePollutionSolutionWorkRequest) ResolvedWorkQueuejTable.getValueAt(row, 0);
            NoisePollutionSensor noisePollutionSensor = noisePollutionSolutionWorkRequest.getNoisePollutionSensor();

            TimeSeries s1 = new TimeSeries("Sensor Reading");
            TimeSeriesCollection dataset = new TimeSeriesCollection();
            final JFreeChart chart = ChartFactory.createTimeSeriesChart("Noise in Decibels vs Time",
                "Timestamp",
                "Noise in Decibels", dataset,
                true,
                true,
                false);
            ChartFrame frame = new ChartFrame("XY Chart For Analysis", chart);
            frame.setVisible(true);
            frame.setSize(800, 680);
            XYPlot p = chart.getXYPlot();
            p.setRangeGridlinePaint(Color.BLACK);
            for (Map.Entry<Date, Float> entry : noisePollutionSensor.getSensorValues().entrySet()) {

                s1.add(new Second(entry.getKey()), entry.getValue());
            }

            //Date date1 = new Date();
            //s1.add(new Second(date1),98.0);
            //

            dataset.addSeries(s1);
        }
    }//GEN-LAST:event_SowSensorReadingButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PendingWorkQueuejTable;
    private javax.swing.JTable ResolvedWorkQueuejTable;
    private javax.swing.JButton SowSensorReadingButton;
    private javax.swing.JTable WorkQueuejTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
