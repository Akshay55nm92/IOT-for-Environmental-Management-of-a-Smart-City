/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.EnvironmentSensorEnterprise.FloodAlertManagement;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.EnvironmentSensorOrganization;
import Business.Organization.GovernmentOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Sensors.AirPollutionSensor;
import Business.Sensors.FloodAlertSensor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AirPollutionSolutionWorkRequest;
import Business.WorkQueue.FloodAlertWorkRequest;
import Business.WorkQueue.GovernmentWorkRequest;
import Business.WorkQueue.NoisePollutionSolutionWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 *
 * @author arjit
 */
public class ViewFloodWorkQueuejPanel extends javax.swing.JPanel {
    private OrganizationDirectory organizationDirectory;
    private UserAccount account;
    private JPanel userProcessContainer;
    private EcoSystem business;
    /**
     * Creates new form ViewfloodworkQueuejpanel
     */
   

    ViewFloodWorkQueuejPanel(JPanel userProcessContainer, UserAccount account, OrganizationDirectory organizationDirectory, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organizationDirectory = organizationDirectory ;
        this.business = business;
        populateTable();
    }
    
    public String convertListToCSV(ArrayList<String> ZipcodeList)
    {
        String zipcodesCommaSeparated = ZipcodeList.stream().collect(Collectors.joining(","));     
        return zipcodesCommaSeparated;
    }
        public void populateTable(){
        ArrayList<String> ZipcodeList = new ArrayList<String>();
        FloodAlertWorkRequest noise_wrs = null;
        DefaultTableModel model = (DefaultTableModel) WorkQueuejTable.getModel();
        model.setRowCount(0);
        
        for(Organization organization : organizationDirectory.getOrganizationList())
        {
            if(organization instanceof EnvironmentSensorOrganization)
            {
                for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof FloodAlertWorkRequest) {
                        noise_wrs = (FloodAlertWorkRequest)wr;
            
                        for(FloodAlertSensor fas : noise_wrs.getFloodalertsensors())
                        {
                        ZipcodeList.add(fas.getZipcode());
                        }
                        Object[] row = new Object[7];
                        row[0] = noise_wrs;
                        row[1] = noise_wrs.getSender();                        
                        row[2] = convertListToCSV(ZipcodeList);
                        row[3] = noise_wrs.getStatus();
                        row[4] = noise_wrs.getMessage();
                        row[5] = noise_wrs.getRequestDate();
                        model.addRow(row);
                }
                }
            }
    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        WorkQueuejTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        PendingWorkQueuejTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        ResolvedWorkQueuejTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        SowSensorReadingButton1 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        WorkQueuejTable.setBackground(new java.awt.Color(234, 234, 249));
        WorkQueuejTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        WorkQueuejTable.setForeground(new java.awt.Color(0, 0, 51));
        WorkQueuejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request ID", "Sender", "Zipcodes", "Status", "Message", "Sent Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(WorkQueuejTable);

        PendingWorkQueuejTable.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        PendingWorkQueuejTable.setForeground(new java.awt.Color(255, 0, 51));
        PendingWorkQueuejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request ID", "Sender", "Zipcodes", "Status", "Message", "Sent Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PendingWorkQueuejTable);

        ResolvedWorkQueuejTable.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        ResolvedWorkQueuejTable.setForeground(new java.awt.Color(51, 204, 0));
        ResolvedWorkQueuejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request ID", "Sender", "Zipcodes", "Status", "Message", "Sent Date", "Resolved Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(ResolvedWorkQueuejTable);

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 0));
        jLabel3.setText("Resolved Requests");

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Pending Requests");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Flood Alert work request");

        jButton2.setBackground(new java.awt.Color(0, 0, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Get Pending Work Requests");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Get resolved Work Request");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        SowSensorReadingButton1.setBackground(new java.awt.Color(0, 0, 204));
        SowSensorReadingButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SowSensorReadingButton1.setForeground(new java.awt.Color(255, 255, 255));
        SowSensorReadingButton1.setText("View Sensor Reading via Line Graph");
        SowSensorReadingButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SowSensorReadingButton1ActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(0, 0, 204));
        backJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 204));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Send Resolution Message to Government");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 908, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(68, 68, 68)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(SowSensorReadingButton1)
                        .addGap(47, 47, 47)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(108, 108, 108)
                        .addComponent(jButton2))
                    .addComponent(backJButton))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(backJButton)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton1)
                    .addComponent(SowSensorReadingButton1)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> ZipcodeList = new ArrayList<String>();
        FloodAlertWorkRequest noise_wrs = null;
        DefaultTableModel model = (DefaultTableModel) PendingWorkQueuejTable.getModel();
        model.setRowCount(0);

        for(Organization organization : organizationDirectory.getOrganizationList())
        {
            if(organization instanceof EnvironmentSensorOrganization)
            {
                for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof FloodAlertWorkRequest)    {
                        noise_wrs = (FloodAlertWorkRequest)wr;

                        if(!noise_wrs.getStatus().equalsIgnoreCase("Resolved"))
                        {
                            for(FloodAlertSensor fas : noise_wrs.getFloodalertsensors())
                            {
                            ZipcodeList.add(fas.getZipcode());
                            }
                            Object[] row = new Object[7];
                            row[0] = noise_wrs;
                            row[1] = noise_wrs.getSender();
                            row[2] = convertListToCSV(ZipcodeList);
                            row[3] = noise_wrs.getStatus();
                            row[4] = noise_wrs.getMessage();
                            row[5] = noise_wrs.getRequestDate();
                            model.addRow(row);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> ZipcodeList = new ArrayList<String>();
        FloodAlertWorkRequest noise_wrs = null;
        DefaultTableModel model = (DefaultTableModel) ResolvedWorkQueuejTable.getModel();
        model.setRowCount(0);

        for(Organization organization : organizationDirectory.getOrganizationList())
        {
            if(organization instanceof EnvironmentSensorOrganization)
            {
                for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof FloodAlertWorkRequest)    {
                    noise_wrs = (FloodAlertWorkRequest)wr;

                    if(noise_wrs.getStatus().equalsIgnoreCase("Resolved"))
                    {
                        
                        for(FloodAlertSensor fas : noise_wrs.getFloodalertsensors())
                        {
                        ZipcodeList.add(fas.getZipcode());
                        }
                        Object[] row = new Object[8];
                        row[0] = noise_wrs;
                        row[1] = noise_wrs.getSender();
                        row[2] = convertListToCSV(ZipcodeList);
                        row[3] = noise_wrs.getStatus();
                        row[4] = noise_wrs.getMessage();
                        row[5] = noise_wrs.getRequestDate();
                        row[6] = noise_wrs.getResolveDate();
                        model.addRow(row);
                    }
                }
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SowSensorReadingButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SowSensorReadingButton1ActionPerformed
        // TODO add your handling code here:
        int row = ResolvedWorkQueuejTable.getSelectedRow();
        if(row <0){
            JOptionPane.showMessageDialog(null, "No row selected");
        }
        else
        {
            FloodAlertWorkRequest floodAlertWorkRequest = (FloodAlertWorkRequest) ResolvedWorkQueuejTable.getValueAt(row, 0);
//            FloodAlertSensor floodAlertSensor = floodAlertWorkRequest.getFloodAlertSensor();
            ArrayList<FloodAlertSensor> floodAlertSensorList = floodAlertWorkRequest.getFloodalertsensors();

            for(int i=0; i<floodAlertSensorList.size(); i++)
            {
            TimeSeries s1 = new TimeSeries("Sensor Reading");
            TimeSeriesCollection dataset = new TimeSeriesCollection();
            final JFreeChart chart = ChartFactory.createTimeSeriesChart("Flood Sensor Value value vs Date and Time",
                "Timestamp",
                "Flood Sensor Value", dataset,
                true,
                true,
                false);
       
            ChartFrame frame = new ChartFrame("XY Chart For Analysis", chart);
            frame.setVisible(true);
            frame.setSize(300, 450);
            XYPlot p = chart.getXYPlot();
            p.setRangeGridlinePaint(Color.BLACK);
            
//            for(int i=0; i<floodAlertSensorList.size(); i++)
//            {
            for (Map.Entry<Date, Float> entry : floodAlertSensorList.get(i).getSensorValues().entrySet()) {

                s1.add(new Millisecond(entry.getKey()), entry.getValue());
            }
            dataset.addSeries(s1);
            }            
            //dataset.addSeries(s1);        
        }
    }//GEN-LAST:event_SowSensorReadingButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        //SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        //sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> ZipcodeList = new ArrayList<String>();
        int row = ResolvedWorkQueuejTable.getSelectedRow();
        if(row <0){
            JOptionPane.showMessageDialog(null, "No row selected");
        }
        else
        {
            //AirPollutionSensor airPollutionSensor = (AirPollutionSensor)SensorReadingsjTable.getValueAt(row, 0);

//            Sensor airPollutionSenso = (Sensor)ResolvedWorkQueuejTable.getValueAt(row, 0);
            
            FloodAlertWorkRequest request = (FloodAlertWorkRequest)ResolvedWorkQueuejTable.getValueAt(row, 0);

            for(FloodAlertSensor fas : request.getFloodalertsensors())
            {
            ZipcodeList.add(fas.getZipcode());
            }
            
            ArrayList<FloodAlertSensor> floodAlertSensorList = request.getFloodalertsensors();
            GovernmentWorkRequest govRequest = new GovernmentWorkRequest();
            govRequest.setFloodAlertSensorList(floodAlertSensorList);
            govRequest.setFloodAlertMessage("The Area bearing pincodes "+ZipcodeList.stream().collect(Collectors.joining(","))+"'are now out of danger for floods.");
            govRequest.setSender(account);
            govRequest.setStatus("Resolution Message Sent to Government");

            Organization orgn = null;
            for(Network n: business.getNetworkList())
            {
                for(Enterprise enterprise : n.getEnterpriseDirectory().getEnterpriseList())
                {
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        //System.out.println(org.getName());
                        if (org instanceof GovernmentOrganization){
                            orgn = org;
                            break;
                        }
                    }
                }
            }
            if (orgn!=null)
            {

                ArrayList<Integer> sensorIDsArray = new ArrayList<Integer>();
                boolean workRequestAlreadyPresent = false;

                    orgn.getWorkQueue().getWorkRequestList().add(govRequest);
                    account.getWorkQueue().getWorkRequestList().add(govRequest);
                    JOptionPane.showMessageDialog(null, "Request sent to Government successfully");
            }
             
          }
        
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PendingWorkQueuejTable;
    private javax.swing.JTable ResolvedWorkQueuejTable;
    private javax.swing.JButton SowSensorReadingButton1;
    private javax.swing.JTable WorkQueuejTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
