/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CitizenOrganization;

import Business.EcoSystem;
import Business.Employee.MapTest;
import Business.Enterprise.Enterprise;
import Business.Organization.CitizenOrganization;
import Business.Organization.GovernmentOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CitizenWorkRequest;
import Business.WorkQueue.GovernmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akshay
 */
public class CitizenNotificationJPanel extends javax.swing.JPanel {

    private OrganizationDirectory directory;
    private UserAccount userAccount;
    private JPanel userProcessContainer;
    /**
     * Creates new form GovernmentOfficialWorkQueueJPanel
     */
    public CitizenNotificationJPanel(JPanel userProcessContainer, UserAccount userAccount, OrganizationDirectory directory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.directory = directory;
        
        populateTable();
    }
    
    public void populateTable()
    {
        CitizenWorkRequest cit_wrs = null;
        DefaultTableModel model = (DefaultTableModel) WorkRequestjTable.getModel();
        model.setRowCount(0);
        
        for(Organization organization : directory.getOrganizationList())
        {
            if(organization instanceof CitizenOrganization) {
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof CitizenWorkRequest) 
            {
                cit_wrs = (CitizenWorkRequest)wr;
            
                if(cit_wrs.getAirPollutionSensor()!=null)
                {
                Object[] row1 = new Object[3];
                row1[0] = cit_wrs;
                row1[1] = cit_wrs.getSender();
                row1[2] = cit_wrs.getAirPollutionMessage();
                model.addRow(row1);
                }
                            
                else if(cit_wrs.getFloodAlertSensorList() != null)
                {
                Object[] row = new Object[3];
                row[0] = cit_wrs;
                row[1] = cit_wrs.getSender();
                row[2] = cit_wrs.getFloodAlertMessage();
                model.addRow(row);
                }
                
            }
        }
      }
        }
    }
    /**
     * Creates new form CitizenNotificationJPanel
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        WorkRequestjTable = new javax.swing.JTable();
        backjButton1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        MessagejLabel = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        WorkRequestjTable.setBackground(new java.awt.Color(232, 232, 247));
        WorkRequestjTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        WorkRequestjTable.setForeground(new java.awt.Color(0, 0, 51));
        WorkRequestjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Request Id", "Sender", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(WorkRequestjTable);

        backjButton1.setBackground(new java.awt.Color(0, 0, 204));
        backjButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backjButton1.setForeground(new java.awt.Color(255, 255, 255));
        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("View Complete Message");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        MessagejLabel.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        MessagejLabel.setForeground(new java.awt.Color(255, 0, 0));

        jButton3.setBackground(new java.awt.Color(0, 0, 204));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("View Location in Hybrid Map");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Citizen Work Queue");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MessagejLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel1)))
                        .addGap(0, 207, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton3))
                    .addComponent(backjButton1))
                .addGap(84, 84, 84)
                .addComponent(MessagejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int getSelectedRow = WorkRequestjTable.getSelectedRow();
        if(getSelectedRow <0){
            JOptionPane.showMessageDialog(null, "No row selected");
        }
        else
        {
        CitizenWorkRequest request = (CitizenWorkRequest)WorkRequestjTable.getValueAt(getSelectedRow, 0);
        if(request.getAirPollutionSensor() != null){
        MessagejLabel.setText(request.getAirPollutionMessage());
        }
        else
        {
        MessagejLabel.setText(request.getFloodAlertMessage());
        }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int row = WorkRequestjTable.getSelectedRow();
        ArrayList<String> zipcodeList = new ArrayList<String>();
        ArrayList<String> latitudeList = new ArrayList<String>();
        ArrayList<String> longitudeList = new ArrayList<String>();
        
        String zipcode;
        String latitude;
        String longitude;
        
        CitizenWorkRequest citizenWorkRequest = (CitizenWorkRequest)WorkRequestjTable.getValueAt(row, 0);
        if(citizenWorkRequest.getFloodAlertSensorList() != null)
        {
            for(int i=0; i<citizenWorkRequest.getFloodAlertSensorList().size();i++)
            {
            zipcodeList.add(citizenWorkRequest.getFloodAlertSensorList().get(i).getZipcode());
            latitudeList.add(citizenWorkRequest.getFloodAlertSensorList().get(i).getLatitude());
            longitudeList.add(citizenWorkRequest.getFloodAlertSensorList().get(i).getLongitude());
            }
        
        try {
        MapTest map = new MapTest();
        for(int i=0; i<citizenWorkRequest.getFloodAlertSensorList().size();i++)
        {
        map.maps(latitudeList.get(i), longitudeList.get(i));
        }
        }
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "The Lattitude, Longitude value provided is incorrect or there is no internet connectivity to retrieve the image of the location");
        }
       }
        
        else if(citizenWorkRequest.getAirPollutionSensor() != null)
        {
            zipcode = citizenWorkRequest.getAirPollutionSensor().getZipcode();
            latitude = citizenWorkRequest.getAirPollutionSensor().getLatitude();
            longitude = citizenWorkRequest.getAirPollutionSensor().getLongitude();
            
        try {
        MapTest map = new MapTest();
        map.maps(latitude, longitude);
        }
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "The Lattitude, Longitude value provided is incorrect or there is no internet connectivity to retrieve the image of the location");
        }
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MessagejLabel;
    private javax.swing.JTable WorkRequestjTable;
    private javax.swing.JButton backjButton1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
